Chapter 1

Background and fundamentals

- Noteworthy aspect
	- short variable declarations
	- multiple return values (along with named returned values)
	- modern standard library
	- concurrency
	- package management (productivity and faster compilation)
	- testing
		- go test
	- code coverage
		- go test - cover
	- formatting
		- go fmt
	- run or build
		- go run filename
		or
		- go build filename
		- ./filename

Chapter 2

- Working with CLI applications
    - Command-line flags
        - arguments and flags designed after "Plan 9" and not common GNU/Linux
        - single-character options cannot be in one line, ie "ls la"
        - short/long does not matter, each flag must be separated from the others
            - ex: flag_cli --spanish -name Buttercup
        - begins with - or --
        - easy to switch away from built-in go cli, import different package and alter Parse boolean
        - some community flag packages use go built-in, some do not
        - to use an outside package, use go get
            - ex: go get github.com/jessevdk/go-flags
    - Avoiding CLI boilerplate
        - cli.go, often built with commands and subcommands, takes care of boilerplate
    - Handling configuration
        - 12-factor apps/12-factor pattern
            - https://12factor.net/
        - common config formats include JSON, YAML, INI, etc.
            - JSON cannot contain comments,, frequent complaint for config files
            - Go doesn't ship with YAML or INI processor, 3rd party available
        - two common areas that may want to be changed/tolerance added with web servers
            - matching URL paths to callback functions
            - starting and stopping servers with an interest in graceful shutdown
        - starting up and shutting down a server
            - graceful shutdowns, package called manners
               * skipping section for now
    - Routing web requests
        - paths ending in / but requested without will redirect to end in /, this may cause query strings to drop off
        - resolution
            - handler examples
                /hello  will only work for
                    /hello
                /goodbye/ will work for
                    /goodbye (with redirect)
                    /goodbye/foo
                    /goodbye/foo/bar
        - handling complex paths with wildcards
        - handling paths with regex
        - criticism of go's built in http package is routing and multiplexing(muxing)
            - many other packages are more flexible/powerful

    - repos used
    go get github.com/jessevdk/go-flags
    go get gopkg.in/urfave/cli.v1
    go get gopkg.in/gcfg.v1

Chapter 3

- Concurrency in Go
    - goroutine
    - ability to do multiple things at one time
    - other langs use "threads"
    - go uses a model called "Communicating Sequential Processes", ie, Goroutines and Channels
    - https://github.com/golang/go/wiki/LearnConcurrency
    - one of the few places in Go where memory leaks can happen
    - frequent use cases, read a file in the background, send messages to a remote log server, save the current state without pausing the program
    - run concurrently, but not necessarily in parallel, ex: only one processor
    - runtime.Gosched(), indicates to go that you can run some tasks in scheduler, important to yield to the scheduler for some goroutines to run
        - sometimes running this may not ensure that the goroutine has completed prior to main finishing and the program terminating
    - Go wait groups
        - simple way to resolve issue stated above
        - sync.WaitGroup
            - several workers are started
            - work is delegated to the workers
            - one process delegates the tasks and then waits for them to complete to continue
            - wait group is a message passing facility that signals a waiting goroutine its safe to proceed
        - race condition
            - two goroutines working with the same piece of data, where that data may change
                - solution, place a lock on a resource until the goroutine is done, then unlock
            - go run race-condition.go exampledata/example1.txt exampledata/example2.txt
            - race flag can be added for better info, go run --race ...
            - sync.Mutex, common way to add lock/unlock on a type
            - only works if data is access with locks, cannot be some with and some without
            - okay to allow multiple reads, but only one write
    -channels
        - easiest comparison is network sockets
        - unidirectional or bidirectional
        - can send structured data
        - common use to signal when something is done or ready to close
        - channels created with make, like maps and slices
        - select statement can watch multiple channels
        - some functions make channels for you, ie time.After
        - closing channels
            - memory manager (garbage collector) will only clean up values it knows it won't use again
            - ie, careful with goroutines and channels (memory leaks)
            - close should only be from the sender, in general with some protective guards
            - suggested way is to use another channel to close
            - receiver should never close receiving channel
        - locked with buffered channels
            - unbuffered channel contain one value at a time
            - sometimes you want a channel as a lock

















